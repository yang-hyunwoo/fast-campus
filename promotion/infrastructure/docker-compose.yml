version: '3.8'
services:
  redis:
    image: redis:latest
    container_name: redis-practice
    ports:
      - "6381:6379"
    volumes:
      - ./redis-config:/usr/local/etc/redis
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - promotion_network
  kafka:
    image: confluentinc/cp-kafka:7.5.1 # Apache Kafka 3.5.x = Confluent Platform 7.5.x
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      # KRaft 필수 설정
      KAFKA_NODE_ID: 1  # 브로커 노드 ID
      CLUSTER_ID: 'EpwKlK0lR6qKZW0cGwZz8w'  # 클러스터 고유 식별자

      # 리스너 설정
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT'
      KAFKA_LISTENERS: 'PLAINTEXT://:9092,CONTROLLER://:9093'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://localhost:9092'

      # KRaft 모드 설정
      KAFKA_PROCESS_ROLES: 'broker,controller'  # 브로커와 컨트롤러 역할 통합
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka:9093'  # 컨트롤러 쿼럼 설정
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'  # 컨트롤러 통신용 리스너

      # 복제 관련 설정
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    volumes:
      - ./data/kafka:/var/lib/kafka/data
    networks:
      - promotion_network
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - "9090:9090"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
    networks:
      - promotion_network    # 네트워크 추가
    depends_on:
      - kafka
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus/rules:/etc/prometheus/rules
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.listen-address=:9091'
    ports:
      - "9091:9091"
    restart: always
    networks:
      - promotion_network

  grafana:
    image: grafana/grafana:10.0.3
    container_name: grafana
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    restart: always
    networks:
      - promotion_network
  jenkins:
    image: jenkins/jenkins:lts
    container_name: jenkins
    privileged: true
    user: root
    ports:
      - "8888:8080"  # 호스트의 8888 포트를 컨테이너의 8080 포트에 매핑
      - "50000:50000"
    volumes:
      - ./jenkins_home:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
      - ../point-service-batch:/var/jenkins_home/workspace/point-service-batch
    environment:
      - TZ=Asia/Seoul
    networks:
      - promotion_network

networks: # 네트워크 정의 추가
  promotion_network:
    driver: bridge

volumes:
  prometheus_data:
  grafana_data: